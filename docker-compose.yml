version: "2.2"
services:
  nginxproxymanager:
    image: "jc21/nginx-proxy-manager:latest"
    container_name: nginxproxymanager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - ./nginx/data:/data
      - ./nginx/letsencrypt:/etc/letsencrypt

  nextcloud:
    image: lscr.io/linuxserver/nextcloud:latest
    container_name: nextcloud
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
    volumes:
      - ./nextcloud/appdata:/config
      - ./nextcloud/data:/data
    restart: unless-stopped

  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
    volumes:
      - ./jellyfin/config:/config
      - ./jellyfin/tvshows:/data/tvshows
      - ./jellyfin/movies:/data/movies
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    command: -H unix:///var/run/docker.sock
    ports:
      - '9000:9000'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  navidrome:
    image: deluan/navidrome:latest
    user: "1000:1000"
    ports:
      - "4533:4533"
    restart: unless-stopped
    environment:
      - ND_SCANSCHEDULE=1h
      - ND_LOGLEVEL=info
      - ND_SESSIONTIMEOUT=24h
      - ND_BASEURL=""
    volumes:
      - "./navidrome/data:/data"
      - "./navidrome/music:/music:ro"

  audiobookshelf:
    image: ghcr.io/advplyr/audiobookshelf
    ports:
      - 13378:80
    volumes:
      - ./audiobookshelf/audiobooks:/audiobooks
      - ./audiobookshelf/podcasts:/podcasts
      - ./audiobookshelf/metadata:/metadata
      - ./audiobookshelf/config:/config
    restart: unless-stopped

  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: unless-stopped
    ports:
      - 9445:80
    volumes:
      - ./bitwarden:/data:rw

  deemix:
    image: registry.gitlab.com/bockiii/deemix-docker
    container_name: Deemix
    volumes:
      - ./deemix/downloads/:/downloads
      - ./deemix/config:/config
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK_SET=022
    ports:
      - 6595:6595

  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Athens
    volumes:
      - ./transmission/data:/config
      - ./transmission/downloads:/downloads
      - ./transmission/watch:/watch
    ports:
      - 9091:9091
      - 51413:51413
      - 51413:51413/udp
    restart: unless-stopped

  speedtest:
    restart: unless-stopped
    container_name: openspeedtest
    ports:
      - '3000:3000'
      - '3001:3001'
    image: openspeedtest/latest
    
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: ["start.sh", "immich"]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - ${EXTERNAL_PATH}:/usr/src/app/external
    env_file:
      - .env
    ports:
      - "2283:3001"
    depends_on:
      redis:
        condition: service_started
      database:
        condition: service_started
    restart: always

  immich-microservices:
    container_name: immich_microservices
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    command: ["start.sh", "microservices"]
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
      - ${EXTERNAL_PATH}:/usr/src/app/external
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      database:
        condition: service_started
    restart: always

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always

  redis:
    container_name: immich_redis
    image: redis:6.2-alpine
    restart: always

  database:
    container_name: immich_postgres
    image: tensorchord/pgvecto-rs:pg14-v0.2.0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always

volumes:
  pgdata:
  model-cache:
      
#  filebrowser:
#    image: hurlenko/filebrowser
#    user: 1000:1000
#    ports:
#      - 8443:8080
#    volumes:
#      - ./:/data
#      - ./filebrowser/config:/config
#    restart: unless-stopped
#
#  homeassistant:
#    image: lscr.io/linuxserver/homeassistant:latest
#    container_name: homeassistant
#    environment:
#      - PUID=1000
#      - PGID=1000
#      - TZ=Europe/Athens
#    volumes:
#      - ./hass/config:/config
#    restart: unless-stopped
